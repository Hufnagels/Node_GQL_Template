type User {
  _id: ID!
  username: String!
  firstName: String
  lastName: String
  date_of_birth: String
  email: String!
  password: String
  createdAt: String
  updatedAt: String
}

type UsersResult {
  users: [User]
  currentPage: Int
  totalPages: Int
}

type UserError {
  message: String!
}

union UserResult = User | UserError

type Query {
  users: [User]
  getUsers(search: String, page: Int, limit: Int): UsersResult
  getUser(_id: ID!): User!
}

input UserInputAdd {
  username: String
  firstName: String
  lastName: String
  date_of_birth: String
  email: String
  password: String
}

input UserInputUpdate {
  #username: String
  firstName: String
  lastName: String
  date_of_birth: String
  #email: String
}


type Mutation {
  createUser(input: UserInputAdd): User
  deleteUser(_id: ID!): String
  updateUser(_id: ID!, input: UserInputUpdate!): User
}